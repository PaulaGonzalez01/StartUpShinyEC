#comment
ages <- c(18,20,22,19,17)
plot(ages)
mean(ages)
mean(ages)
#comment
ages <- c(18,20,2,19,17)
mean(ages)
plot(ages)
mean(ages)
var(ages)
sqrt(var(ages))
#comment
ages <- c(18,18,18,18,18)
var(ages)
#comment
ages <- c(18,19,20,21,22)
var(ages)
#comment
ages <- c(1,19,20,21,22)
plot(ages)
mean(ages)
var(ages)
sqrt(var(ages))
summary(ages)
#comment
ages <- c(20:50)
20:50
#comment
ages <- c(20:50, 68)
20:50, 68
#comment
ages <- c(20:50,68)
20:50,68
#comment
(ages <- c(20:50,68))
(ages)
plot(ages)
plot(ages, frame=FALSE,col='blue')
plot(ages, frame=FALSE,col='blue',
xlab = 'Estudiantes', ylab = 'Edades')
plot(ages, frame=FALSE,col='blue',
xlab = 'Students',
ylab = 'Ages',
main = 'Plot of students ages')
plot(ages, frame=FALSE,col='blue',
xlab = 'Students',
ylab = 'Ages',
main = "Plot of student's ages")
agesVariance <- var(ages)
(ages <- c(range1,68,range2))
range1 <- 30:50
range2 <- rep(34,5)
(ages <- c(range1,68,range2))
sqrt(agesVariance)
rm(list = ls())
#Simular Datos
sexo<-rbinom(45,1,0.5)
estatura<-rnorm(45,160,5)
estatura<- round(estatura,1)
matriz<-cbind((estatura),(edades),(sexo))
matriz<-as.data.frame(matriz)
colnames(matriz)=c("estatura","edades","sexo")
rm(list = ls())
rbinom(45,1,0.5)
rnorm(45,160,5)
#Simular Datos
sexo<-rbinom(45,1,0.5) #num de individuos, posibilidades discretas, probabilidad de exito (p = 0.5, q = 1-p)
estatura<-rnorm(45,160,5) #random normalized numbers
estatura<- round(estatura,1) #round with one decimal
matriz<-cbind((estatura),(edades),(sexo))
matriz<-as.data.frame(matriz)
matriz<-cbind((estatura),(edades),(sexo))
matriz<-cbind((estatura),(sexo))
cbind((estatura),(sexo))
matriz<-as.data.frame(matriz)
as.data.frame(matriz)
colnames(matriz)=c("estatura","edades","sexo")
colnames(matriz)=c("estatura","edades","sexo")
colnames(matriz)=c("estatura","sexo")
colnames(matriz)
c("estatura","sexo")
matriz
matriz$sexo)
matriz$sexo
table(matriz$sexo)
#Pie
pct <- prop.table(table(matriz$sexo))# cuanto porcentualmente hay, con frecuencias relativas (numeros entre 0 y 1)
prop.table(table(matriz$sexo))
pct <- round(pct,1)
round(pct,1)
round(pct,1)
etiqueta=c(paste("Femenino",round(pct[1],2)),paste("Masculino",round(pct[2],2)))
pie( prop.table(table(matriz$sexo)) , xlab="Estaturas de los Estudianes",
ylab="Frecuencia",main = "Histograma de Estaturas",
col=2:3,    labels = etiqueta)
#Barras
barplot( prop.table(table(matriz$sexo)) , xlab="Estaturas de los Estudianes",
ylab="Frecuencia",main = "Histograma de Estaturas",
col=2:3,names=c("Femenino","Masculino"), ylim = c(0,1))
#Histograma
hist(matriz$estatura , xlab="Estaturas de los Estudianes",
ylab="Frecuencia",main = "Histograma de Estaturas",
col=4)
#Boxplot
boxplot(matriz$estatura~matriz$sexo, frame=FALSE, col=7:8,
names=c("Femenino","Masculino"))
summary(matriz$estatura)
sort(matriz$edades)
sort(matriz$edades)
c(paste("Femenino",round(pct[1],2)),paste("Masculino",round(pct[2],2)))
c(paste("Femenino",round(pct[1],2)),paste("Masculino",round(pct[2],2)))
#Histograma
hist(matriz$estatura , xlab="Estaturas de los Estudianes",
ylab="Frecuencia",main = "Histograma de Estaturas",
col='green')
#Histograma
hist(matriz$estatura , xlab="Estaturas de los Estudianes",
ylab="Frecuencia",main = "Histograma de Estaturas",
col='#63BFE0')
mean(matriz$estatura)
#Boxplot
boxplot(matriz$estatura~matriz$sexo, frame=FALSE, col=7:8,
names=c("Femenino","Masculino"))
#Histograma
hist(matriz$estatura , xlab="Estaturas de los Estudianes",
ylab="Frecuencia",main = "Histograma de Estaturas",
col='#63BFE0')
#Barras
barplot( prop.table(table(matriz$sexo)) , xlab="Estaturas de los Estudianes",
ylab="Frecuencia",main = "Histograma de Estaturas",
col=2:3,names=c("Femenino","Masculino"), ylim = c(0,1))
barplot
#Histograma
hist(matriz$estatura , xlab="Estaturas de los Estudianes",
ylab="Frecuencia",main = "Histograma de Estaturas",
col='#63BFE0')
#Barras
barplot( prop.table(table(matriz$sexo)) , xlab="Estaturas de los Estudianes",
ylab="Frecuencia",main = "Histograma de Estaturas",
col=2:3,names=c("Femenino","Masculino"), ylim = c(0,1))
#Barras
barplot( prop.table(table(matriz$sexo)) , xlab="Estaturas de los Estudianes",
ylab="Frecuencia",main = "Histograma de Estaturas",
col=2:3,names=c("Femenino","Masculino"), ylim = c(0,1))
#Barras
barplot( prop.table(table(matriz$sexo)) , xlab="Estaturas de los Estudianes",
ylab="Frecuencia",main = "Histograma de Estaturas",
col=2:3,names=c("Femenino","Masculino"), ylim = c(0,1))
#Evento de lanzar la moneda 20 veces
moneda = c(0,1,0,0,1,0,1,1,0,0,1,0,0,1,1,0,0,1,0,1)
fr = table(moneda)/length(moneda)
print(fr)
fr[1]
fr[1]
fr[2]
fr[2]/length(moneda)
X1 <- c(17,27,11,30,18,22,14,22,25,27,39,38,
34,39,44,37,29,59,54,44,60,64,57,53,
32,24,37,35,30,32,23,39,24,42,37,42,
21,28,45,42,33,31,33,38,25,47,40,35,
31,27,48,38,33,37,41,30,45,48,26,45,
44,42,28,34,32,32,37,42,38,42,37,45,
38,39,27,35,38,36,45,29,28,26,36,53,
33,42,34,33,42,43,39,39,33,37,37,21,
35,50,25,33,39,69,51,70,68,57,47,67,
55,65,51,69,43,39,39,28,29,40,35,38,
33,38,34,30,32,34,39,37,32,52,33,35,
36,35,32,38,46,36,38,34,34,34,39,29,
35,34,31,28,35,37,38,38,39,31,41,40,
27,46,32,40,33,43,34,38,38,29,34,31,
41,31,52,38,39,33,40,41,33,35,37,34,
30,28,36,35,30,34,36,41,27,39,35,31,
20,13,22,20,20,28,23,16,39,46,31,35,
35,29,32,33,43,41,29,35,41,24,24,52,
45,24,38,38,37,33,40,30,28,41,37,37,
40,32,29,30,12,20,27,22,15,15,14,16)
X12 <- sort(X1)
(X12 <- sort(X1))
table(X12)
n <- length(X12)
maxX12 <- max(X12)
minX12 <- min(X12)
rangeX12 <- range(X12)
ampl <- diff(rangeX12)
ampl
rangeX12
nointervalos <- 5   # Número de intervalos que se desea
rangointervalos <- ampl / nointervalos
rangointervalos
# Fórmula : valor mínimo / intérvalos
nointervalos <- 6   # Número de intervalos que se desea
rangointervalos <- ampl / nointervalos
rangointervalos
# Fórmula : valor mínimo / intérvalos
nointervalos <- 5   # Número de intervalos que se desea
rangointervalos <- ampl / nointervalos
print(paste("Los valores de cada grupos van ..."," de ",
rangointervalos, " en  ", rangointervalos,
" a partir de :", min(muestra)))
print(paste("Los valores de cada grupos van ..."," de ",
rangointervalos, " en  ", rangointervalos,
" a partir de :", min(X12)))
tabla.intervalos <- transform(table(cut(X12, breaks = 5)))
tabla.intervalos
plot(cars)
S <- c(43,36,45,61,53,15,56,36)
T <- c(28,26,29,32,27,23,30,24)
F <- c(12,9,46,35,24,4,16,12)
S <- c(43,36,45,61,53,15,56,36)
T <- c(28,26,29,32,27,23,30,24)
F <- c(12,9,46,35,24,4,16,12)
dataF <- data.frame(S,T,F)
S <- c(43,36,45,61,53,15,56,36)
T <- c(28,26,29,32,27,23,30,24)
F <- c(12,9,46,35,24,4,16,12)
dataF <- data.frame(S,T,F)
colnames(dataF) <- c('SO2','Temperatura','Fabricas')
S <- c(43,36,45,61,53,15,56,36)
T <- c(28,26,29,32,27,23,30,24)
F <- c(12,9,46,35,24,4,16,12)
desInd <- data.frame(S,T,F)
colnames(desInd) <- c('SO2','Temperatura','Fabricas')
boxplot(desInd)
S <- c(43,36,45,61,53,15,56,36)
T <- c(28,26,29,32,27,23,30,24)
F <- c(12,9,46,35,24,4,16,12)
desInd <- data.frame(S,T,F)
colnames(desInd) <- c('SO2','Temperatura','Fabricas')
boxplot(desInd, horizontal = TRUE)
S <- sort(c(43,36,45,61,53,15,56,36))
T <- c(28,26,29,32,27,23,30,24)
F <- c(12,9,46,35,24,4,16,12)
desInd <- data.frame(S,T,F)
colnames(desInd) <- c('SO2','Temperatura','Fabricas')
boxplot(desInd, horizontal = TRUE)
S <- sort(c(43,36,45,61,53,15,56,36))
T <- sort(c(28,26,29,32,27,23,30,24))
F <- sort(c(12,9,46,35,24,4,16,12))
desInd <- data.frame(S,T,F)
colnames(desInd) <- c('SO2','Temperatura','Fabricas')
boxplot(desInd, horizontal = TRUE)
S <- sort(c(43,36,45,61,53,15,56,36))
T <- sort(c(28,26,29,32,27,23,30,24))
F <- sort(c(12,9,46,35,24,4,16,12))
desInd <- data.frame(S,T,F)
colnames(desInd) <- c('SO2','Temperatura','Fabricas')
boxplot(desInd, horizontal = TRUE)
#Tarea 1
#Ejercicio 29
X <- sort(c(15, 36, 36, 43, 45, 53, 56, 61))
Y <- c(23, 24, 26, 27, 28, 29, 30, 32)
Y <- sort(c(23, 24, 26, 27, 28, 29, 30, 32))
par(mfrow=c(1,1))
#Generar variables de un modelo continuo uniforme
runi <- runif(10000,0,1) #variable aleatoria con distrib uniforme
head(runi)
means <- NULL
for(i in 1:1000){
means <- c(means, mean(sample(runi,size = 100)))
} #calculamos la media para 1000 muestras aleatorias de n=100
means
hist(runi, probability = TRUE)
hist(means)
par(mfrow=c(1,1))
means
hist(runi, probability = TRUE)
hist(means)
par(mfrow=c(1,1))
par(mfrow=c(1,1))
par(mfrow=c(1,2))
hist(runi, probability = TRUE)
hist(means, probability = TRUE)
par(mfrow=c(1,1))
info <- as.integer(runif(min=0, max=100,n=1000))
save<-quantile(info, prob=seq(0,1,length=101))
save
randNorm<-rnorm(save)
randNorm
density<-dnorm(randNorm)
library(ggplot2)
ggplot(info.frame(x=randNorm, y=density)) + aes(x=x,y=y) + geom_point()+labs(x="Variable aleatoria normal", y="Densidad")
install.packages(ggplot2)
install.packages("tidyverse")
density<-dnorm(randNorm)
library(ggplot2)
ggplot(info.frame(x=randNorm, y=density)) + aes(x=x,y=y) + geom_point()+labs(x="Variable aleatoria normal", y="Densidad")
info <- as.integer(runif(min=0, max=100,n=1000))
save<-quantile(info, prob=seq(0,1,length=101))
save
randNorm<-rnorm(save)
randNorm
density<-dnorm(randNorm)
library(ggplot2)
ggplot(info.frame(x=randNorm, y=density)) + aes(x=x,y=y) + geom_point()+labs(x="Variable aleatoria normal", y="Densidad")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(info.frame(x=randNorm, y=density)) + aes(x=x,y=y) + geom_point()+labs(x="Variable aleatoria normal", y="Densidad")
data <- as.integer(runif(min=0, max=100,n=1000))
save<-quantile(data, prob=seq(0,1,length=101))
save
randNorm<-rnorm(save)
randNorm
density<-dnorm(randNorm)
install.packages("ggplot2")
library(ggplot2)
ggplot(data.frame(x=randNorm, y=density)) + aes(x=x,y=y) + geom_point()+labs(x="Variable aleatoria normal", y="Densidad")
data <- as.integer(runif(min=0, max=100,n=1000))
save<-quantile(data, prob=seq(0,1,length=101))
save
randNorm<-rnorm(save)
randNorm
density<-dnorm(randNorm)
library(ggplot2)
ggplot(data.frame(x=randNorm, y=density)) + aes(x=x,y=y) + geom_point()+labs(x="Variable aleatoria normal", y="Densidad")
x=seq(-4,4,length=200)
y=(1/(6*sqrt(2*pi)))*exp((-(x+3)^2)/72)
plot(x,y,type="l",lwd=2,col="red")
x=seq(-50,50,length=200)
y=(1/(6*sqrt(2*pi)))*exp((-(x+3)^2)/72)
plot(x,y,type="l",lwd=2,col="red")
x=seq(-20,20,length=100)
y=(1/(6*sqrt(2*pi)))*exp((-(x+3)^2)/72)
plot(x,y,type="l",lwd=2,col="red")
a<-rbinom(100, 15, 0.25)
muetra2<-plot(dbinom(100,15,0.25),type="h",xlab="k",ylab="P(X=k)",main="Función de Probabilidad B(100,15,0.25)")
a<-rbinom(100, 15, 0.25)
muetra2<-plot(rbinom(100,15,0.25),type="h",xlab="k",ylab="P(X=k)",main="Función de Probabilidad B(100,15,0.25)")
a<-rbinom(100, 15, 0.25)
muetra2<-plot(a,type="h",xlab="k",ylab="P(X=k)",main="Función de Probabilidad B(100,15,0.25)")
count <- 0
x <- 0
muestra<-c()
repeat{
muestra1 <- dpois(x,4)
muestra <-c(muestra,muestra1)
count <- count + 1
x <- x + 1
if(count == 100) break
}
muestra
percentil <- quantile(muestra,prob=seq(0,1,length=101))[51]
percentil
media1 <- mean(muestra)
media1
desviacion <- var(muestra)
desviacion
xxs <- c(media1 - desviacion)
cat('x-xs: ',xxs)
sumary <- summary(muestra)
sumary
hist(muestra)
count10 <- 0
x10 <- 0
muestra10<-c()
repeat{
muestra100 <- dpois(x,10)
muestra10 <-c(muestra10,muestra100)
count10 <- count10 + 1
x10 <- x10 + 1
if(count == 100) break
}
muestra10
percentil10 <- quantile(muestra10,prob=seq(0,1,length=101))[51]
percentil10
media100 <- mean(muestra10)
media100
desviacion10 <- var(muestra10)
desviacion10
xxs10 <- c(media100 - desviacion10)
cat('x-xs: ',xxs10)
sumary10 <- summary(muestra10)
sumary10
hist(muestra10)
count <- 0
medias <- c()
repeat{
muestra1 <- rexp(30,1/15)
media <- (mean(muestra1))
medias <- c(medias,media)
count <- count +1
if(count==100)break
}
percentil <- quantile(medias, prob=seq(0,1,length =101 ))[96]
percentil
media1 <- mean(medias)
media1 <- mean(medias)
media1
desviacion <- var(medias)
desviacion
xxs <- c(media1-desviacion)
xxs
(summary(medias))
hist(medias)
asuntos <- read.dta(
library(foreign)
asuntos <- read.dta("http:fmwww.bc.edu/ec-p/data/wooldridge/affairs.dta")
install.packages(foreign)
asuntos <- read.dta("http:fmwww.bc.edu/ec-p/data/wooldridge/affairs.dta")
library(foreign)
asuntos <- read.dta("http:fmwww.bc.edu/ec-p/data/wooldridge/affairs.dta")
asuntos <- read.dta("http:fmwww.bc.edu/ec-p/data/wooldridge/affairs.dta")
asuntos <- read.dta("http://fmwww.bc.edu/ec-p/data/wooldridge/affairs.dta")
View(asuntos)
#Resultados por frecuencia y proporcion compartida
table(tienenHijos)
#Crear factores por variable aleatoria
tienenHijos<- factor(asuntos$kids, labels = c=("No", "Si"))
#Crear factores por variable aleatoria
tienenHijos<- factor(asuntos$kids, labels = c("No", "Si"))
summary(tienenHijos)
#Crear escala y factor
escala<- c("Muy infeliz","Infeliz","Normal", "Feliz", "Muy feliz")
casados<- factor(asuntos$ratemarr, labels = escala)
summary(casados)
#Resultados por frecuencia y proporcion compartida
table(tienenHijos)
prop.table(table(casados))
(cuenta2<-table(casados,tienenHijos))
prop.table(cuenta2,margin = 1) #Resumen x filas
library(foreign)
asuntos <- read.dta("http://fmwww.bc.edu/ec-p/data/wooldridge/affairs.dta")
#Crear factores por variable aleatoria
tienenHijos<- factor(asuntos$kids, labels = c("No", "Si"))
summary(tienenHijos)
#Crear escala y factor
escala<- c("Muy infeliz","Infeliz","Normal", "Feliz", "Muy feliz")
casados<- factor(asuntos$ratemarr, labels = escala)
summary(casados)
#Resultados por frecuencia y proporcion compartida
table(tienenHijos)
prop.table(table(casados))
(cuenta2<-table(casados,tienenHijos))
prop.table(cuenta2,margin = 1) #Resumen x filas
#Graficos
pie(table(casados), col = 3:7)
barplot(table(casados), horiz = TRUE, col = 3:7)
barplot(table(tienenHijos, casados), legend = TRUE, las=1,args.legend = c(x="Bo"),horiz = TRUE, col = 3:7)
hist(asuntos$age, breaks = seq(0,60,5), col="green")
#Pruebas de independencia
chisq.test(cuenta2, correct = T)
fisher.test(cuenta2)
library(shiny); runApp('C:/Users/paula/OneDrive - Escuela Superior Politécnica del Litoral/Estadística/2020/rstudio/shiny/proyecto/proyecto/app2.R')
runApp('C:/Users/paula/OneDrive - Escuela Superior Politécnica del Litoral/Estadística/2020/rstudio/shiny/proyecto/proyecto/app2.R')
runApp('app2.R')
runApp('C:/Users/paula/OneDrive - Escuela Superior Politécnica del Litoral/Estadística/2020/rstudio/shiny/proyecto/proyecto/app2.R')
runApp('C:/Users/paula/OneDrive - Escuela Superior Politécnica del Litoral/Estadística/2020/rstudio/shiny/proyecto/proyecto/app2.R')
runApp('C:/Users/paula/OneDrive - Escuela Superior Politécnica del Litoral/Estadística/2020/rstudio/shiny/proyecto/proyecto/app2.R')
runApp('C:/Users/paula/OneDrive - Escuela Superior Politécnica del Litoral/Estadística/2020/rstudio/shiny/proyecto/proyecto/app2.R')
library(shiny); runApp('app2.R')
